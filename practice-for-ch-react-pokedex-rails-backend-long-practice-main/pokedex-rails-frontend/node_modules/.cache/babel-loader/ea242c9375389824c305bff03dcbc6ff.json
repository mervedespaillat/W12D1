{"ast":null,"code":"import { LOAD_ITEMS, REMOVE_ITEM, ADD_ITEM } from './items';\nconst LOAD = 'pokemon/LOAD';\nconst LOAD_TYPES = 'pokemon/LOAD_TYPES';\nconst ADD_ONE = 'pokemon/ADD_ONE';\n\nconst load = list => ({\n  type: LOAD,\n  list\n});\n\nconst loadTypes = types => ({\n  type: LOAD_TYPES,\n  types\n});\n\nconst addOnePokemon = pokemon => ({\n  type: ADD_ONE,\n  pokemon\n});\n\nexport const createPokemon = data => async dispatch => {\n  console.log(data);\n  const response = await fetch(`/api/pokemon`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (response.ok) {\n    const pokemon = await response.json();\n    dispatch(addOnePokemon(pokemon));\n    return pokemon;\n  }\n};\nexport const updatePokemon = data => async dispatch => {\n  const response = await fetch(`/api/pokemon/${data.id}`, {\n    method: 'put',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (response.ok) {\n    const pokemon = await response.json();\n    dispatch(addOnePokemon(pokemon));\n    return pokemon;\n  }\n};\nexport const getOnePokemon = id => async dispatch => {\n  const response = await fetch(`/api/pokemon/${id}`);\n\n  if (response.ok) {\n    const pokemon = await response.json();\n    dispatch(addOnePokemon(pokemon));\n  }\n};\nexport const getPokemon = () => async dispatch => {\n  const response = await fetch(`/api/pokemon`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n  }\n};\nexport const getPokemonTypes = () => async dispatch => {\n  const response = await fetch(`/api/pokemon/types`);\n\n  if (response.ok) {\n    const types = await response.json();\n    dispatch(loadTypes(types));\n  }\n};\nconst initialState = {\n  list: [],\n  types: []\n};\n\nconst sortList = list => {\n  return list.sort((pokemonA, pokemonB) => {\n    return pokemonA.no - pokemonB.no;\n  }).map(pokemon => pokemon.id);\n};\n\nconst pokemonReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD:\n      {\n        const allPokemon = {};\n        action.list.forEach(pokemon => {\n          allPokemon[pokemon.id] = pokemon;\n        });\n        return { ...allPokemon,\n          ...state,\n          list: sortList(action.list)\n        };\n      }\n\n    case LOAD_TYPES:\n      {\n        return { ...state,\n          types: action.types\n        };\n      }\n\n    case ADD_ONE:\n      {\n        if (!state[action.pokemon.id]) {\n          const newState = { ...state,\n            [action.pokemon.id]: action.pokemon\n          };\n          const pokemonList = newState.list.map(id => newState[id]);\n          pokemonList.push(action.pokemon);\n          newState.list = sortList(pokemonList);\n          return newState;\n        }\n\n        return { ...state,\n          [action.pokemon.id]: { ...state[action.pokemon.id],\n            ...action.pokemon\n          }\n        };\n      }\n\n    case LOAD_ITEMS:\n      {\n        return { ...state,\n          [action.pokemonId]: { ...state[action.pokemonId],\n            items: action.items.map(item => item.id)\n          }\n        };\n      }\n\n    case REMOVE_ITEM:\n      {\n        return { ...state,\n          [action.pokemonId]: { ...state[action.pokemonId],\n            items: state[action.pokemonId].filter(item => item.id !== action.itemId)\n          }\n        };\n      }\n\n    case ADD_ITEM:\n      {\n        console.log(action.item);\n        return { ...state,\n          [action.item.pokemonId]: { ...state[action.item.pokemonId],\n            items: [...state[action.item.pokemonId], action.item.id]\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default pokemonReducer;","map":{"version":3,"sources":["/Users/mervedoganespaillat/Desktop/RUBY/TWELFTH_WEEK/Project/practice-for-ch-react-pokedex-rails-backend-long-practice-main/pokedex-rails-frontend/src/store/pokemon.js"],"names":["LOAD_ITEMS","REMOVE_ITEM","ADD_ITEM","LOAD","LOAD_TYPES","ADD_ONE","load","list","type","loadTypes","types","addOnePokemon","pokemon","createPokemon","data","dispatch","console","log","response","fetch","method","headers","body","JSON","stringify","ok","json","updatePokemon","id","getOnePokemon","getPokemon","getPokemonTypes","initialState","sortList","sort","pokemonA","pokemonB","no","map","pokemonReducer","state","action","allPokemon","forEach","newState","pokemonList","push","pokemonId","items","item","filter","itemId"],"mappings":"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","sourcesContent":["import { LOAD_ITEMS, REMOVE_ITEM, ADD_ITEM } from './items';\n\nconst LOAD = 'pokemon/LOAD';\nconst LOAD_TYPES = 'pokemon/LOAD_TYPES';\nconst ADD_ONE = 'pokemon/ADD_ONE';\n\nconst load = list => ({\n  type: LOAD,\n  list,\n});\n\nconst loadTypes = types => ({\n  type: LOAD_TYPES,\n  types,\n});\n\nconst addOnePokemon = pokemon => ({\n  type: ADD_ONE,\n  pokemon,\n});\n\nexport const createPokemon = data => async dispatch => {\n  console.log(data);\n  const response = await fetch(`/api/pokemon`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (response.ok) {\n    const pokemon = await response.json();\n    dispatch(addOnePokemon(pokemon));\n    return pokemon;\n  }\n};\n\nexport const updatePokemon = data => async dispatch => {\n  const response = await fetch(`/api/pokemon/${data.id}`, {\n    method: 'put',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  \n  if (response.ok) {\n    const pokemon = await response.json();\n    dispatch(addOnePokemon(pokemon));\n    return pokemon;\n  }\n};\n\nexport const getOnePokemon = id => async dispatch => {\n  const response = await fetch(`/api/pokemon/${id}`);\n\n  if (response.ok) {\n    const pokemon = await response.json();\n    dispatch(addOnePokemon(pokemon));\n  }\n};\n\nexport const getPokemon = () => async dispatch => {\n  const response = await fetch(`/api/pokemon`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n  }\n};\n\nexport const getPokemonTypes = () => async dispatch => {\n  const response = await fetch(`/api/pokemon/types`);\n\n  if (response.ok) {\n    const types = await response.json();\n    dispatch(loadTypes(types));\n  }\n};\n\nconst initialState = {\n  list: [],\n  types: []\n};\n\nconst sortList = (list) => {\n  return list.sort((pokemonA, pokemonB) => {\n    return pokemonA.no - pokemonB.no;\n  }).map((pokemon) => pokemon.id);\n};\n\nconst pokemonReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD: {\n      const allPokemon = {};\n      action.list.forEach(pokemon => {\n        allPokemon[pokemon.id] = pokemon;\n      });\n      return {\n        ...allPokemon,\n        ...state,\n        list: sortList(action.list),\n      };\n    }\n    case LOAD_TYPES: {\n      return {\n        ...state,\n        types: action.types,\n      };\n    }\n    case ADD_ONE: {\n      if (!state[action.pokemon.id]) {\n        const newState = {\n          ...state,\n          [action.pokemon.id]: action.pokemon\n        };\n        const pokemonList = newState.list.map(id => newState[id]);\n        pokemonList.push(action.pokemon);\n        newState.list = sortList(pokemonList);\n        return newState;\n      }\n      return {\n        ...state,\n        [action.pokemon.id]: {\n          ...state[action.pokemon.id],\n          ...action.pokemon,\n        }\n      };\n    }\n    case LOAD_ITEMS: {\n      return {\n        ...state,\n        [action.pokemonId]: {\n          ...state[action.pokemonId],\n          items: action.items.map(item => item.id),\n        }\n      };\n    }\n    case REMOVE_ITEM: {\n      return {\n        ...state,\n        [action.pokemonId]: {\n          ...state[action.pokemonId],\n          items: state[action.pokemonId].filter(\n            (item) => item.id !== action.itemId\n          ),\n        },\n      };\n    }\n    case ADD_ITEM: {\n      console.log(action.item);\n      return {\n        ...state,\n        [action.item.pokemonId]: {\n          ...state[action.item.pokemonId],\n          items: [...state[action.item.pokemonId], action.item.id],\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default pokemonReducer;\n"]},"metadata":{},"sourceType":"module"}